#!/bin/bash
profile_build(){
	export PREFIX=/mnt/eos1/usr
	export PKG_CONFIG_PATH=/mnt/eos1/usr/lib/x86_64-linux-gnu/pkgconfig 
	export CMAKE_PREFIX_PATH=/mnt/eos1/usr
}
profile_usr(){
	export LD_LIBRARY_PATH=/mnt/eos1/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH
	export XDG_DATA_DIRS=/mnt/eos1/usr/share:$XDG_DATA_DIRS
	export LANGUAGE=zh_CN
	export GDM_LANG=zh_CN
	export LANG=zh_CN.UTF-8
	export PATH=/mnt/eos1/usr/bin:$PATH
}
#---------- innner function --------------
build_install(){
	if [ ! -e build ]; then
		[ ! -e meson.build ] && return 1 # not meson project
		mkdir build
		. profile_build
		meson build --prefix=$PREFIX --cmake-prefix-path=$CMAKE_PREFIX_PATH --pkg-config-path=$PKG_CONFIG_PATH
	fi
	ninja -C build -j4  > ./.tmp.log
	if [ $? -eq 1 ];then
		echo "ninja failure" 
		return 1
	fi
	local ret=$(grep "ninja: no work to do" ./.tmp.log | grep -v grep )
	rm ./.tmp.log
	if [ "_$ret" = "_" ];then 
		ninja -C build install >> /dev/null
	fi
	return 0

}
#func help	:show help information
help(){
	echo -e "========help======\tuse cmd like this --> `basename $0` func"
	grep ^#func $0 | grep -v grep  
	echo "========end======="
}
# -----------  extern function bellow --------------
#extern function prefix is extern_
#you can use ln -s $0 pre_func to call a extern_func()
#func set	:run settingboard
extern_set(){
	build_install || return 1
	. profile_usr
	com.patapua.settingboard
}
#func win	:run wingpanel
extern_win(){
	build_install || return 1
	. profile_usr
	io.elementary.wingpanel
}
#func dtar	: tar  a deb package and remove the tared files
extern_dtar(){
	if [ "_$1" = "_" ];then
		pkgname="tmp"
	else
		pkgname=$1
	fi

	tar cvf $pkgname.tar *.ddeb \
		*.buildinfo \
		*.changes \
		*.deb \
		*.tar.xz \
		*.tar.gz \
		*.dsc 

	if [ $? -ne 0 ] ;then 
		read -p "not delete ? (y)es/(n)o : " 
		if [ "$REPLY" = "y" -o "$REPLY" = "yes" ];then
			return 1
		fi
	fi
	tar tf $pkgname.tar  | xargs rm 
}
#func dbuild	: build deb package
extern_dbuild(){
	[ -d debian ] || return 1
	dpkg-buildpackage -rfakeroot -tc --no-sign
}
#func rename [path]	: rename project for patapua
extern_rename(){
	if [ $# -gt 0 ];then
		pathdir=$1
	else
		pathdir=`pwd`
	fi
	# replace pattern==> 'source:replace'
	change_patterns=(
		'"io\.elementary\.switchboard":"com.patapua.settingboard"'
		'"io\/elementary\/switchboard":"com\/patapua\/settingboard"'
		'libswitchboard-2.0:libsettingboard-1.0'
		'io\.elementary\.stylesheet:com\.patapua\.stylesheet'
		'elementary-icon-theme:patapua-icon-theme'
		'elementary-default-settings:patapua-default-settings'
		'elementary OS:patapua OS'
		'gtk-icon-theme-name = elementary:gtk-icon-theme-name = patapua'
		'gtk-sound-theme-name = elementary:gtk-sound-theme-name = patapua'
		'\/usr\/share\/icons\/elementary:\/usr\/share\/icons\/patapua'
	)
	for change_pattern in "${change_patterns[@]}"
	do
		OLDIFS=${IFS};IFS=':'
		pat=(${change_pattern[@]})
		IFS=${OLDIFS}
		# echo "${pat[0]} --> ${pat[1]}"
		grep ${pat[0]} ${pathdir} -rl --exclude-dir={build,.git,.github} --exclude=*.{po,pot} | xargs sed -i "s/${pat[0]}/${pat[1]}/" 
	done
	#grep "io.elementary.switchboard" . -rn --exclude-dir={build,.git,.github} --exclude=*.{po,pot} 
	# rename files
	rename_patterns=(
		'io.elementary.switchboard:com.patapua.settingboard'
	)
	for name in "${rename_patterns[@]}"
	do
		OLDIFS=${IFS};IFS=':'
		var=(${name[@]})
		IFS=${OLDIFS}
		# echo "${var[0]} --> ${var[1]}"
		for file in `find ${pathdir} -name ${var[0]}* `;do
			newfile=${file/var[0]/var[1]}
			#echo "$file --> $newfile"
			mv $file $newfile
		done
	done

	echo "-----------end--------checking as follow cmd-------"
	echo "find . -name io.elementary.switchboard*"
	echo 'grep -E "switchboard|elementary" . -rni --exclude-dir={build,.git,.github} --exclude=*.{po,pot}'
}

APP=""

case $# in
	0)
		APP=$(basename $0)
		APP=extern_${APP#*_} # replace prefix_ with extern_
		;;
	*)
		APP=extern_$1
		shift 1
		;;
esac

APP=$(grep ^$APP.*"(){$" $0 | grep -v grep)
if [ $? -eq 0 ];then
	APP=${APP%%()*} # remove longest suffix 
	echo willing to run $APP
	$APP $@
else
	help
fi

exit 0



